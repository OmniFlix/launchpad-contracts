/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, Round, Addr, Timestamp, Uint64, InstantiateMsg, CollectionDetails, ExecuteMsg, QueryMsg, Decimal, Config, ArrayOfToken, Token, UserDetails, MintCountInRound, ArrayOfTupleOfUint32AndRound, Uint32 } from "./OmniflixMinter.types";
export interface OmniflixMinterReadOnlyInterface {
  contractAddress: string;
  collection: () => Promise<CollectionDetails>;
  config: () => Promise<Config>;
  mintableTokens: () => Promise<ArrayOfToken>;
  mintedTokens: ({
    address
  }: {
    address: string;
  }) => Promise<UserDetails>;
  totalTokens: () => Promise<Uint32>;
  rounds: () => Promise<ArrayOfTupleOfUint32AndRound>;
}
export class OmniflixMinterQueryClient implements OmniflixMinterReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.collection = this.collection.bind(this);
    this.config = this.config.bind(this);
    this.mintableTokens = this.mintableTokens.bind(this);
    this.mintedTokens = this.mintedTokens.bind(this);
    this.totalTokens = this.totalTokens.bind(this);
    this.rounds = this.rounds.bind(this);
  }

  collection = async (): Promise<CollectionDetails> => {
    return this.client.queryContractSmart(this.contractAddress, {
      collection: {}
    });
  };
  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  mintableTokens = async (): Promise<ArrayOfToken> => {
    return this.client.queryContractSmart(this.contractAddress, {
      mintable_tokens: {}
    });
  };
  mintedTokens = async ({
    address
  }: {
    address: string;
  }): Promise<UserDetails> => {
    return this.client.queryContractSmart(this.contractAddress, {
      minted_tokens: {
        address
      }
    });
  };
  totalTokens = async (): Promise<Uint32> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_tokens: {}
    });
  };
  rounds = async (): Promise<ArrayOfTupleOfUint32AndRound> => {
    return this.client.queryContractSmart(this.contractAddress, {
      rounds: {}
    });
  };
}
export interface OmniflixMinterInterface extends OmniflixMinterReadOnlyInterface {
  contractAddress: string;
  sender: string;
  mint: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  mintAdmin: ({
    denomId,
    recipient
  }: {
    denomId?: string;
    recipient: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removeRound: ({
    roundIndex
  }: {
    roundIndex: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  addRound: ({
    round
  }: {
    round: Round;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateCollectionRound: ({
    round,
    roundIndex
  }: {
    round: Round;
    roundIndex: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateWhitelistRound: ({
    endTime,
    mintPrice,
    roundLimit,
    startTime
  }: {
    endTime?: Timestamp;
    mintPrice?: Uint128;
    roundLimit?: number;
    startTime?: Timestamp;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  burnRemainingTokens: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateRoyaltyRatio: ({
    ratio
  }: {
    ratio: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateMintPrice: ({
    mintPrice
  }: {
    mintPrice: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  randomizeList: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OmniflixMinterClient extends OmniflixMinterQueryClient implements OmniflixMinterInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mint = this.mint.bind(this);
    this.mintAdmin = this.mintAdmin.bind(this);
    this.removeRound = this.removeRound.bind(this);
    this.addRound = this.addRound.bind(this);
    this.updateCollectionRound = this.updateCollectionRound.bind(this);
    this.updateWhitelistRound = this.updateWhitelistRound.bind(this);
    this.burnRemainingTokens = this.burnRemainingTokens.bind(this);
    this.updateRoyaltyRatio = this.updateRoyaltyRatio.bind(this);
    this.updateMintPrice = this.updateMintPrice.bind(this);
    this.randomizeList = this.randomizeList.bind(this);
  }

  mint = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint: {}
    }, fee, memo, _funds);
  };
  mintAdmin = async ({
    denomId,
    recipient
  }: {
    denomId?: string;
    recipient: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_admin: {
        denom_id: denomId,
        recipient
      }
    }, fee, memo, _funds);
  };
  removeRound = async ({
    roundIndex
  }: {
    roundIndex: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_round: {
        round_index: roundIndex
      }
    }, fee, memo, _funds);
  };
  addRound = async ({
    round
  }: {
    round: Round;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_round: {
        round
      }
    }, fee, memo, _funds);
  };
  updateCollectionRound = async ({
    round,
    roundIndex
  }: {
    round: Round;
    roundIndex: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_collection_round: {
        round,
        round_index: roundIndex
      }
    }, fee, memo, _funds);
  };
  updateWhitelistRound = async ({
    endTime,
    mintPrice,
    roundLimit,
    startTime
  }: {
    endTime?: Timestamp;
    mintPrice?: Uint128;
    roundLimit?: number;
    startTime?: Timestamp;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_whitelist_round: {
        end_time: endTime,
        mint_price: mintPrice,
        round_limit: roundLimit,
        start_time: startTime
      }
    }, fee, memo, _funds);
  };
  burnRemainingTokens = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      burn_remaining_tokens: {}
    }, fee, memo, _funds);
  };
  updateRoyaltyRatio = async ({
    ratio
  }: {
    ratio: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_royalty_ratio: {
        ratio
      }
    }, fee, memo, _funds);
  };
  updateMintPrice = async ({
    mintPrice
  }: {
    mintPrice: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_mint_price: {
        mint_price: mintPrice
      }
    }, fee, memo, _funds);
  };
  randomizeList = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      randomize_list: {}
    }, fee, memo, _funds);
  };
}