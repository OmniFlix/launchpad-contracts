/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Timestamp, Uint64, Uint128, InstantiateMsg, RoundConfig, Round, Coin, ExecuteMsg, QueryMsg, TupleOfUint8AndRound, String, Boolean, ArrayOfString, ArrayOfTupleOfUint8AndRound } from "./OmniflixRoundWhitelist.types";
export interface OmniflixRoundWhitelistMsg {
  contractAddress: string;
  sender: string;
  removeRound: ({
    roundIndex
  }: {
    roundIndex: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addRound: ({
    roundConfig
  }: {
    roundConfig: RoundConfig;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  privateMint: ({
    collector
  }: {
    collector: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addMembers: ({
    members,
    roundIndex
  }: {
    members: string[];
    roundIndex: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updatePrice: ({
    mintPrice,
    roundIndex
  }: {
    mintPrice: Coin;
    roundIndex: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class OmniflixRoundWhitelistMsgComposer implements OmniflixRoundWhitelistMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.removeRound = this.removeRound.bind(this);
    this.addRound = this.addRound.bind(this);
    this.privateMint = this.privateMint.bind(this);
    this.addMembers = this.addMembers.bind(this);
    this.updatePrice = this.updatePrice.bind(this);
  }

  removeRound = ({
    roundIndex
  }: {
    roundIndex: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_round: {
            round_index: roundIndex
          }
        })),
        funds: _funds
      })
    };
  };
  addRound = ({
    roundConfig
  }: {
    roundConfig: RoundConfig;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_round: {
            round_config: roundConfig
          }
        })),
        funds: _funds
      })
    };
  };
  privateMint = ({
    collector
  }: {
    collector: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          private_mint: {
            collector
          }
        })),
        funds: _funds
      })
    };
  };
  addMembers = ({
    members,
    roundIndex
  }: {
    members: string[];
    roundIndex: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_members: {
            members,
            round_index: roundIndex
          }
        })),
        funds: _funds
      })
    };
  };
  updatePrice = ({
    mintPrice,
    roundIndex
  }: {
    mintPrice: Coin;
    roundIndex: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_price: {
            mint_price: mintPrice,
            round_index: roundIndex
          }
        })),
        funds: _funds
      })
    };
  };
}