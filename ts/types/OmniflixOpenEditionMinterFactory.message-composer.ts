/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Addr, Uint128, InstantiateMsg, FactoryParamsForMultiMinterFactoryExtension, Coin, MultiMinterFactoryExtension, ExecuteMsg, Timestamp, Uint64, Decimal, MinterInstantiateMsgForOpenEditionMinterInitExtention, CollectionDetails, WeightedAddress, OpenEditionMinterInitExtention, TokenDetails, MinterInstantiateMsgForMultiMinterInitExtention, MultiMinterInitExtention, QueryMsg, ParamsResponse } from "./OmniflixOpenEditionMinterFactory.types";
export interface OmniflixOpenEditionMinterFactoryMsg {
  contractAddress: string;
  sender: string;
  createOpenEditionMinter: ({
    msg
  }: {
    msg: MinterInstantiateMsgForOpenEditionMinterInitExtention;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  createMultiMintOpenEditionMinter: ({
    msg
  }: {
    msg: MinterInstantiateMsgForMultiMinterInitExtention;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateAdmin: ({
    admin
  }: {
    admin: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateFeeCollectorAddress: ({
    feeCollectorAddress
  }: {
    feeCollectorAddress: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateMinterCreationFee: ({
    minterCreationFee
  }: {
    minterCreationFee: Coin;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateMinterCodeId: ({
    minterCodeId
  }: {
    minterCodeId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateMultiMinterCreationFee: ({
    multiMinterCreationFee
  }: {
    multiMinterCreationFee: Coin;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateMultiMinterContractId: ({
    multiMinterContractId
  }: {
    multiMinterContractId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class OmniflixOpenEditionMinterFactoryMsgComposer implements OmniflixOpenEditionMinterFactoryMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createOpenEditionMinter = this.createOpenEditionMinter.bind(this);
    this.createMultiMintOpenEditionMinter = this.createMultiMintOpenEditionMinter.bind(this);
    this.updateAdmin = this.updateAdmin.bind(this);
    this.updateFeeCollectorAddress = this.updateFeeCollectorAddress.bind(this);
    this.updateMinterCreationFee = this.updateMinterCreationFee.bind(this);
    this.updateMinterCodeId = this.updateMinterCodeId.bind(this);
    this.updateMultiMinterCreationFee = this.updateMultiMinterCreationFee.bind(this);
    this.updateMultiMinterContractId = this.updateMultiMinterContractId.bind(this);
  }

  createOpenEditionMinter = ({
    msg
  }: {
    msg: MinterInstantiateMsgForOpenEditionMinterInitExtention;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_open_edition_minter: {
            msg
          }
        })),
        funds: _funds
      })
    };
  };
  createMultiMintOpenEditionMinter = ({
    msg
  }: {
    msg: MinterInstantiateMsgForMultiMinterInitExtention;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_multi_mint_open_edition_minter: {
            msg
          }
        })),
        funds: _funds
      })
    };
  };
  updateAdmin = ({
    admin
  }: {
    admin: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_admin: {
            admin
          }
        })),
        funds: _funds
      })
    };
  };
  updateFeeCollectorAddress = ({
    feeCollectorAddress
  }: {
    feeCollectorAddress: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_fee_collector_address: {
            fee_collector_address: feeCollectorAddress
          }
        })),
        funds: _funds
      })
    };
  };
  updateMinterCreationFee = ({
    minterCreationFee
  }: {
    minterCreationFee: Coin;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_minter_creation_fee: {
            minter_creation_fee: minterCreationFee
          }
        })),
        funds: _funds
      })
    };
  };
  updateMinterCodeId = ({
    minterCodeId
  }: {
    minterCodeId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_minter_code_id: {
            minter_code_id: minterCodeId
          }
        })),
        funds: _funds
      })
    };
  };
  updateMultiMinterCreationFee = ({
    multiMinterCreationFee
  }: {
    multiMinterCreationFee: Coin;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_multi_minter_creation_fee: {
            multi_minter_creation_fee: multiMinterCreationFee
          }
        })),
        funds: _funds
      })
    };
  };
  updateMultiMinterContractId = ({
    multiMinterContractId
  }: {
    multiMinterContractId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_multi_minter_contract_id: {
            multi_minter_contract_id: multiMinterContractId
          }
        })),
        funds: _funds
      })
    };
  };
}