/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Addr, Uint128, InstantiateMsg, OpenEditionMinterFactoryParams, MultiMinterParams, Coin, ExecuteMsg, Timestamp, Uint64, Decimal, MinterInstantiateMsgForOpenEditionMinterInitExtention, AuthDetails, CollectionDetails, WeightedAddress, OpenEditionMinterInitExtention, TokenDetails, MinterInstantiateMsgForEmpty, Empty, QueryMsg, Boolean, ParamsResponse, ArrayOfAddr } from "./OmniflixOpenEditionMinterFactory.types";
export interface OmniflixOpenEditionMinterFactoryMsg {
  contractAddress: string;
  sender: string;
  createOpenEditionMinter: ({
    msg
  }: {
    msg: MinterInstantiateMsgForOpenEditionMinterInitExtention;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  createMultiMintOpenEditionMinter: ({
    msg
  }: {
    msg: MinterInstantiateMsgForEmpty;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateAdmin: ({
    admin
  }: {
    admin: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateFeeCollectorAddress: ({
    feeCollectorAddress
  }: {
    feeCollectorAddress: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateOpenEditionMinterCreationFee: ({
    openEditionMinterCreationFee
  }: {
    openEditionMinterCreationFee: Coin;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateOpenEditionMinterCodeId: ({
    openEditionMinterCodeId
  }: {
    openEditionMinterCodeId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateMultiMinterCreationFee: ({
    multiMinterCreationFee
  }: {
    multiMinterCreationFee: Coin;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateMultiMinterCodeId: ({
    multiMinterCodeId
  }: {
    multiMinterCodeId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  pause: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unpause: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setPausers: ({
    pausers
  }: {
    pausers: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class OmniflixOpenEditionMinterFactoryMsgComposer implements OmniflixOpenEditionMinterFactoryMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createOpenEditionMinter = this.createOpenEditionMinter.bind(this);
    this.createMultiMintOpenEditionMinter = this.createMultiMintOpenEditionMinter.bind(this);
    this.updateAdmin = this.updateAdmin.bind(this);
    this.updateFeeCollectorAddress = this.updateFeeCollectorAddress.bind(this);
    this.updateOpenEditionMinterCreationFee = this.updateOpenEditionMinterCreationFee.bind(this);
    this.updateOpenEditionMinterCodeId = this.updateOpenEditionMinterCodeId.bind(this);
    this.updateMultiMinterCreationFee = this.updateMultiMinterCreationFee.bind(this);
    this.updateMultiMinterCodeId = this.updateMultiMinterCodeId.bind(this);
    this.pause = this.pause.bind(this);
    this.unpause = this.unpause.bind(this);
    this.setPausers = this.setPausers.bind(this);
  }

  createOpenEditionMinter = ({
    msg
  }: {
    msg: MinterInstantiateMsgForOpenEditionMinterInitExtention;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_open_edition_minter: {
            msg
          }
        })),
        funds: _funds
      })
    };
  };
  createMultiMintOpenEditionMinter = ({
    msg
  }: {
    msg: MinterInstantiateMsgForEmpty;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_multi_mint_open_edition_minter: {
            msg
          }
        })),
        funds: _funds
      })
    };
  };
  updateAdmin = ({
    admin
  }: {
    admin: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_admin: {
            admin
          }
        })),
        funds: _funds
      })
    };
  };
  updateFeeCollectorAddress = ({
    feeCollectorAddress
  }: {
    feeCollectorAddress: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_fee_collector_address: {
            fee_collector_address: feeCollectorAddress
          }
        })),
        funds: _funds
      })
    };
  };
  updateOpenEditionMinterCreationFee = ({
    openEditionMinterCreationFee
  }: {
    openEditionMinterCreationFee: Coin;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_open_edition_minter_creation_fee: {
            open_edition_minter_creation_fee: openEditionMinterCreationFee
          }
        })),
        funds: _funds
      })
    };
  };
  updateOpenEditionMinterCodeId = ({
    openEditionMinterCodeId
  }: {
    openEditionMinterCodeId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_open_edition_minter_code_id: {
            open_edition_minter_code_id: openEditionMinterCodeId
          }
        })),
        funds: _funds
      })
    };
  };
  updateMultiMinterCreationFee = ({
    multiMinterCreationFee
  }: {
    multiMinterCreationFee: Coin;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_multi_minter_creation_fee: {
            multi_minter_creation_fee: multiMinterCreationFee
          }
        })),
        funds: _funds
      })
    };
  };
  updateMultiMinterCodeId = ({
    multiMinterCodeId
  }: {
    multiMinterCodeId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_multi_minter_code_id: {
            multi_minter_code_id: multiMinterCodeId
          }
        })),
        funds: _funds
      })
    };
  };
  pause = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          pause: {}
        })),
        funds: _funds
      })
    };
  };
  unpause = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unpause: {}
        })),
        funds: _funds
      })
    };
  };
  setPausers = ({
    pausers
  }: {
    pausers: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_pausers: {
            pausers
          }
        })),
        funds: _funds
      })
    };
  };
}